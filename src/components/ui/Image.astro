---
import type { ImageProps } from '../../types/components';

interface Props extends ImageProps {
  format?: 'webp' | 'avif' | 'png' | 'jpeg';
  quality?: number;
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  lazy = true,
  rounded = false,
  class: className = '',
  aspectRatio = 'auto',
  objectFit = 'cover',
  priority = false,
  ...rest
} = Astro.props;

// 기본 스타일
const baseStyles = 'transition-all duration-300';

// 둥근 모서리 스타일
const roundedStyles = {
  false: '',
  true: 'rounded-lg',
  sm: 'rounded',
  md: 'rounded-md',
  lg: 'rounded-lg',
  xl: 'rounded-xl',
  full: 'rounded-full',
};

// 종횡비 스타일
const aspectRatioStyles = {
  auto: '',
  square: 'aspect-square',
  video: 'aspect-video',
  portrait: 'aspect-[3/4]',
  landscape: 'aspect-[4/3]',
};

// 객체 맞춤 스타일
const objectFitStyles = {
  cover: 'object-cover',
  contain: 'object-contain',
  fill: 'object-fill',
  none: 'object-none',
  scale: 'object-scale-down',
};

// 최종 클래스 조합
const imageClasses = [
  baseStyles,
  roundedStyles[rounded as keyof typeof roundedStyles] || roundedStyles[false],
  aspectRatioStyles[aspectRatio],
  objectFitStyles[objectFit],
  className,
]
  .filter(Boolean)
  .join(' ');

// 로딩 속성 설정
const loadingAttr = priority ? 'eager' : lazy ? 'lazy' : 'eager';
---

<img
  src={src as string}
  alt={alt}
  width={width}
  height={height}
  class={imageClasses}
  loading={loadingAttr}
  {...rest}
/>

<style>
  img[loading='lazy'] {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
  }

  img[loading='lazy'].loaded {
    opacity: 1;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const lazyImages = document.querySelectorAll('img[loading="lazy"]');

    lazyImages.forEach(img => {
      (img as HTMLImageElement).addEventListener('load', () => {
        img.classList.add('loaded');
      });
    });
  });
</script>
