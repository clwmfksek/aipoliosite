---
import type { TagProps } from '../../types/components';

interface Props extends TagProps {}

const { 
  variant = 'filled', 
  color = 'primary', 
  size = 'md', 
  removable = false, 
  class: className = '',
  onRemove,
  ...rest 
} = Astro.props;

// 기본 스타일
const baseStyles = 'inline-flex items-center gap-1 font-medium transition-all duration-200 rounded-full';

// 크기별 스타일
const sizeStyles = {
  sm: 'px-2 py-0.5 text-xs',
  md: 'px-3 py-1 text-sm',
  lg: 'px-4 py-1.5 text-base'
};

// 컬러별 스타일 (filled 변형)
const colorStyles = {
  filled: {
    primary: 'bg-primary-100 text-primary-800 dark:bg-primary-900/30 dark:text-primary-300',
    secondary: 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300',
    accent: 'bg-accent-100 text-accent-800 dark:bg-accent-900/30 dark:text-accent-300',
    success: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
    warning: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
    danger: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300'
  },
  outline: {
    primary: 'border border-primary-300 text-primary-700 dark:border-primary-600 dark:text-primary-300',
    secondary: 'border border-gray-300 text-gray-700 dark:border-gray-600 dark:text-gray-300',
    accent: 'border border-accent-300 text-accent-700 dark:border-accent-600 dark:text-accent-300',
    success: 'border border-green-300 text-green-700 dark:border-green-600 dark:text-green-300',
    warning: 'border border-yellow-300 text-yellow-700 dark:border-yellow-600 dark:text-yellow-300',
    danger: 'border border-red-300 text-red-700 dark:border-red-600 dark:text-red-300'
  },
  ghost: {
    primary: 'text-primary-700 hover:bg-primary-100 dark:text-primary-300 dark:hover:bg-primary-900/30',
    secondary: 'text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700',
    accent: 'text-accent-700 hover:bg-accent-100 dark:text-accent-300 dark:hover:bg-accent-900/30',
    success: 'text-green-700 hover:bg-green-100 dark:text-green-300 dark:hover:bg-green-900/30',
    warning: 'text-yellow-700 hover:bg-yellow-100 dark:text-yellow-300 dark:hover:bg-yellow-900/30',
    danger: 'text-red-700 hover:bg-red-100 dark:text-red-300 dark:hover:bg-red-900/30'
  }
};

// 커스텀 색상 처리 (CSS 변수나 hex 값)
const isCustomColor = !Object.keys(colorStyles.filled).includes(color);
let customColorStyle = '';

if (isCustomColor) {
  // 커스텀 색상인 경우 CSS 스타일 생성
  if (variant === 'filled') {
    customColorStyle = `background-color: ${color}20; color: ${color}; border-color: ${color}40;`;
  } else if (variant === 'outline') {
    customColorStyle = `border-color: ${color}; color: ${color};`;
  } else {
    customColorStyle = `color: ${color};`;
  }
}

// 최종 클래스 조합
const tagClasses = [
  baseStyles,
  sizeStyles[size],
  !isCustomColor ? colorStyles[variant][color as keyof typeof colorStyles.filled] : '',
  removable ? 'pr-1' : '',
  className
].filter(Boolean).join(' ');

// Remove button size
const removeIconSize = {
  sm: 'w-3 h-3',
  md: 'w-4 h-4', 
  lg: 'w-5 h-5'
};

// 상태별 아이콘 (접근성 향상)
const statusIcons = {
  success: '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.236 4.53L7.53 10.23a.75.75 0 00-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg>',
  warning: '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true"><path fill-rule="evenodd" d="M8.485 2.495c.673-1.167 2.357-1.167 3.03 0l6.28 10.875c.673 1.167-.17 2.625-1.516 2.625H3.72c-1.347 0-2.189-1.458-1.515-2.625L8.485 2.495zM10 5a.75.75 0 01.75.75v3.5a.75.75 0 01-1.5 0v-3.5A.75.75 0 0110 5zm0 9a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>',
  danger: '<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd"></path></svg>',
};

// 현재 색상이 상태 색상인지 확인
const hasStatusIcon = ['success', 'warning', 'danger'].includes(color) && !isCustomColor;
---

<span 
  class={tagClasses}
  style={isCustomColor ? customColorStyle : undefined}
  {...rest}
>
  {hasStatusIcon && (
    <span set:html={statusIcons[color as keyof typeof statusIcons]} />
  )}
  <slot />
  
  {removable && (
    <button
      type="button"
      class={`ml-1 hover:bg-black/10 dark:hover:bg-white/10 rounded-full p-0.5 transition-colors ${removeIconSize[size]}`}
      aria-label="Remove tag"
      data-tag-remove
    >
      <svg class="w-full h-full" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
        <path d="M6.28 5.22a.75.75 0 00-1.06 1.06L8.94 10l-3.72 3.72a.75.75 0 101.06 1.06L10 11.06l3.72 3.72a.75.75 0 101.06-1.06L11.06 10l3.72-3.72a.75.75 0 00-1.06-1.06L10 8.94 6.28 5.22z" />
      </svg>
    </button>
  )}
</span>

{removable && (
  <script>
    // Tag 제거 기능
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('[data-tag-remove]').forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const tag = button.closest('span');
          if (tag) {
            // 애니메이션과 함께 제거
            tag.style.transform = 'scale(0.8)';
            tag.style.opacity = '0';
            
            setTimeout(() => {
              tag.remove();
            }, 200);
            
            // 커스텀 이벤트 발생 (상위 컴포넌트에서 처리 가능)
            const customEvent = new CustomEvent('tag-removed', {
              detail: { tag, text: tag.textContent?.trim() }
            });
            document.dispatchEvent(customEvent);
          }
        });
      });
    });
  </script>
)}

<style>
  /* 호버 상태 최적화 */
  .tag-removable:hover .remove-btn {
    @apply opacity-100;
  }
  
  /* 커스텀 색상 지원을 위한 CSS 변수 */
  .tag-custom {
    --tag-color: var(--custom-color, #6366f1);
    --tag-bg: color-mix(in srgb, var(--tag-color) 10%, transparent);
    --tag-border: color-mix(in srgb, var(--tag-color) 30%, transparent);
  }
</style> 