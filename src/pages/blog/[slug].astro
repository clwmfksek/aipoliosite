---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/layout/Header.astro';
import Footer from '../../components/layout/Footer.astro';
import MainContent from '../../components/layout/MainContent.astro';
import Button from '../../components/ui/Button.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog', ({ data }) => {
    return data.published !== false && data.draft !== true;
  });

  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();

// 메타데이터 설정
const pageTitle = post.data.seo?.title || post.data.title;
const pageDescription = post.data.seo?.description || post.data.description;
const canonicalURL = new URL(`/blog/${post.slug}`, Astro.site);
const ogImage = post.data.image ? new URL(post.data.image, Astro.site) : null;

// 구조화된 데이터
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: post.data.title,
  description: post.data.description,
  author: {
    '@type': 'Person',
    name: post.data.author,
  },
  datePublished: post.data.date.toISOString(),
  dateModified: (post.data.updated || post.data.date).toISOString(),
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': canonicalURL.toString(),
  },
  publisher: {
    '@type': 'Organization',
    name: 'Portfolio',
    logo: {
      '@type': 'ImageObject',
      url: new URL('/favicon.svg', Astro.site).toString(),
    },
  },
  ...(ogImage && {
    image: {
      '@type': 'ImageObject',
      url: ogImage.toString(),
    },
  }),
};

// 관련 포스트 찾기
const allPosts = await getCollection('blog', ({ data }) => {
  return data.published !== false && data.draft !== true && data.title !== post.data.title;
});

const relatedPosts = allPosts
  .filter(
    p =>
      p.data.category === post.data.category ||
      p.data.tags.some(tag => post.data.tags.includes(tag))
  )
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .slice(0, 3);

// 이전/다음 포스트
const sortedPosts = allPosts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
const currentIndex = sortedPosts.findIndex(p => p.slug === post.slug);
const prevPost = currentIndex < sortedPosts.length - 1 ? sortedPosts[currentIndex + 1] : null;
const nextPost = currentIndex > 0 ? sortedPosts[currentIndex - 1] : null;
---

<Layout
  title={pageTitle}
  description={pageDescription}
  canonicalURL={canonicalURL}
  ogTitle={post.data.title}
  ogDescription={post.data.description}
  ogImage={ogImage}
  ogType="article"
  twitterCard="summary_large_image"
>
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

  <Header />

  <MainContent maxWidth="4xl" class="py-8">
    <!-- 블로그 헤더 -->
    <header class="mb-12">
      <!-- 네비게이션 -->
      <nav class="mb-8">
        <a
          href="/blog"
          class="inline-flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
        >
          <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          블로그로 돌아가기
        </a>
      </nav>

      <!-- 메타 정보 -->
      <div class="mb-6">
        {
          post.data.category && (
            <span class="inline-block px-3 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full mb-4">
              {post.data.category}
            </span>
          )
        }

        <h1
          class="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4 leading-tight"
        >
          {post.data.title}
        </h1>

        {
          post.data.excerpt && (
            <p class="text-lg md:text-xl text-gray-600 dark:text-gray-300 mb-6 leading-relaxed">
              {post.data.excerpt}
            </p>
          )
        }

        <div class="flex flex-wrap items-center gap-6 text-sm text-gray-500 dark:text-gray-400">
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            <span>{post.data.author}</span>
          </div>

          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
              ></path>
            </svg>
            <time datetime={post.data.date.toISOString()}>
              {
                post.data.date.toLocaleDateString('ko-KR', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                })
              }
            </time>
          </div>

          {
            post.data.readTime && (
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
                <span>{post.data.readTime}분 읽기</span>
              </div>
            )
          }

          {
            post.data.updated && post.data.updated.getTime() !== post.data.date.getTime() && (
              <div class="flex items-center">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                  />
                </svg>
                <span>
                  {post.data.updated.toLocaleDateString('ko-KR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}{' '}
                  업데이트
                </span>
              </div>
            )
          }
        </div>
      </div>

      <!-- 태그 -->
      {
        post.data.tags && post.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.data.tags.map(tag => (
              <span class="px-3 py-1 text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-300 rounded-full">
                #{tag}
              </span>
            ))}
          </div>
        )
      }

      <!-- 공유 버튼 -->
      <div class="mt-8 flex items-center gap-4">
        <span class="text-sm font-medium text-gray-700 dark:text-gray-300">공유하기:</span>
        <div class="flex gap-2">
          <button
            onclick={`shareToTwitter('${post.data.title}', '${canonicalURL}')`}
            class="p-2 rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800 transition-colors"
            title="트위터에 공유"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"
              ></path>
            </svg>
          </button>

          <button
            onclick={`shareToFacebook('${canonicalURL}')`}
            class="p-2 rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800 transition-colors"
            title="페이스북에 공유"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"
              ></path>
            </svg>
          </button>

          <button
            onclick={`shareToLinkedIn('${post.data.title}', '${canonicalURL}')`}
            class="p-2 rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800 transition-colors"
            title="링크드인에 공유"
          >
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
              <path
                d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
              ></path>
            </svg>
          </button>

          <button
            onclick={`copyToClipboard('${canonicalURL}')`}
            class="p-2 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 transition-colors"
            title="링크 복사"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
              ></path>
            </svg>
          </button>
        </div>
      </div>
    </header>

    <!-- 히어로 이미지 -->
    {
      post.data.image && (
        <div class="mb-12 rounded-xl overflow-hidden">
          <img
            src={post.data.image}
            alt={post.data.imageAlt || post.data.title}
            class="w-full h-64 md:h-96 object-cover"
            loading="eager"
          />
        </div>
      )
    }

    <!-- 콘텐츠 -->
    <article class="prose prose-lg dark:prose-invert max-w-none">
      <Content />
    </article>

    <!-- 포스트 하단 액션 -->
    <div class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
      <div class="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-6">
        <div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
            이 글이 도움이 되었나요?
          </h3>
          <p class="text-gray-600 dark:text-gray-400">공유하거나 피드백을 남겨주세요!</p>
        </div>

        <div class="flex gap-3">
          <Button href="/contact" variant="primary" size="sm"> 피드백 보내기 </Button>
          <Button
            onclick={`shareToTwitter('${post.data.title}', '${canonicalURL}')`}
            variant="outline"
            size="sm"
          >
            공유하기
          </Button>
        </div>
      </div>
    </div>

    <!-- 이전/다음 포스트 네비게이션 -->
    {
      (prevPost || nextPost) && (
        <nav class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            {prevPost && (
              <div class="group">
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2">이전 글</p>
                <a
                  href={`/blog/${prevPost.slug}`}
                  class="block p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 transition-colors"
                >
                  <h4 class="font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                    {prevPost.data.title}
                  </h4>
                  <p class="text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">
                    {prevPost.data.description}
                  </p>
                </a>
              </div>
            )}

            {nextPost && (
              <div class="group">
                <p class="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2">다음 글</p>
                <a
                  href={`/blog/${nextPost.slug}`}
                  class="block p-4 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 transition-colors"
                >
                  <h4 class="font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                    {nextPost.data.title}
                  </h4>
                  <p class="text-sm text-gray-600 dark:text-gray-400 mt-1 line-clamp-2">
                    {nextPost.data.description}
                  </p>
                </a>
              </div>
            )}
          </div>
        </nav>
      )
    }

    <!-- 관련 포스트 -->
    {
      relatedPosts.length > 0 && (
        <section class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
          <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-8">관련 글</h3>

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {relatedPosts.map(relatedPost => (
              <article class="group bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-lg transition-shadow">
                <a href={`/blog/${relatedPost.slug}`} class="block">
                  {relatedPost.data.image && (
                    <div class="aspect-video overflow-hidden">
                      <img
                        src={relatedPost.data.image}
                        alt={relatedPost.data.imageAlt || relatedPost.data.title}
                        class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                        loading="lazy"
                      />
                    </div>
                  )}

                  <div class="p-6">
                    {relatedPost.data.category && (
                      <span class="inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded-full mb-3">
                        {relatedPost.data.category}
                      </span>
                    )}

                    <h4 class="font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors mb-2">
                      {relatedPost.data.title}
                    </h4>

                    <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-4">
                      {relatedPost.data.description}
                    </p>

                    <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <time datetime={relatedPost.data.date.toISOString()}>
                        {relatedPost.data.date.toLocaleDateString('ko-KR')}
                      </time>
                      {relatedPost.data.readTime && <span>{relatedPost.data.readTime}분 읽기</span>}
                    </div>
                  </div>
                </a>
              </article>
            ))}
          </div>

          <div class="text-center mt-8">
            <Button href="/blog" variant="outline">
              모든 글 보기
            </Button>
          </div>
        </section>
      )
    }
  </MainContent>

  <Footer />
</Layout>

<script>
  // 공유 기능
  function shareToTwitter(title: string, url: string) {
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(title)}&url=${encodeURIComponent(url)}`;
    window.open(twitterUrl, '_blank', 'width=600,height=400');
  }

  function shareToFacebook(url: string) {
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
    window.open(facebookUrl, '_blank', 'width=600,height=400');
  }

  function shareToLinkedIn(title: string, url: string) {
    const linkedinUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`;
    window.open(linkedinUrl, '_blank', 'width=600,height=400');
  }

  async function copyToClipboard(url: string) {
    try {
      await navigator.clipboard.writeText(url);

      // 성공 피드백
      const button = event?.target as HTMLElement;
      const originalText = button.innerHTML;
      button.innerHTML = `
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
      `;

      setTimeout(() => {
        button.innerHTML = originalText;
      }, 2000);
    } catch (err) {
      console.error('링크 복사 실패:', err);
      // 폴백: 텍스트 선택
      const textArea = document.createElement('textarea');
      textArea.value = url;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
    }
  }

  // 전역 함수로 등록
  (window as any).shareToTwitter = shareToTwitter;
  (window as any).shareToFacebook = shareToFacebook;
  (window as any).shareToLinkedIn = shareToLinkedIn;
  (window as any).copyToClipboard = copyToClipboard;

  // 읽기 진행률 표시
  function updateReadingProgress() {
    const article = document.querySelector('article');
    if (!article) return;

    const articleTop = article.offsetTop;
    const articleHeight = article.offsetHeight;
    const windowHeight = window.innerHeight;
    const scrollTop = window.scrollY;

    const progress = Math.min(
      Math.max((scrollTop + windowHeight - articleTop) / articleHeight, 0),
      1
    );

    // 진행률 바 업데이트 (옵션)
    const progressBar = document.getElementById('reading-progress');
    if (progressBar) {
      progressBar.style.width = `${progress * 100}%`;
    }
  }

  window.addEventListener('scroll', updateReadingProgress);
  updateReadingProgress();
</script>

<style>
  /* 프로그레스 바 스타일 */
  #reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    height: 3px;
    background: linear-gradient(90deg, #3b82f6, #1d4ed8);
    z-index: 9999;
    transition: width 0.3s ease;
  }

  /* Prose 스타일 개선 */
  .prose {
    @apply text-gray-900 dark:text-gray-100;
  }

  .prose h1,
  .prose h2,
  .prose h3,
  .prose h4,
  .prose h5,
  .prose h6 {
    @apply text-gray-900 dark:text-white;
  }

  .prose a {
    @apply text-blue-600 dark:text-blue-400 no-underline hover:underline;
  }

  .prose code {
    @apply bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 px-1 py-0.5 rounded text-sm;
  }

  .prose pre {
    @apply bg-gray-900 dark:bg-gray-800;
  }

  .prose pre code {
    @apply bg-transparent text-gray-100 p-0;
  }

  .prose blockquote {
    @apply border-l-blue-500 bg-blue-50 dark:bg-blue-900/20 text-gray-900 dark:text-gray-100;
  }

  .prose table {
    @apply bg-white dark:bg-gray-800;
  }

  .prose thead {
    @apply bg-gray-50 dark:bg-gray-700;
  }

  .prose th,
  .prose td {
    @apply border-gray-200 dark:border-gray-600;
  }

  /* 라인 클램프 유틸리티 */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
