---
import type { LinkProps } from '../../types/components';

interface Props extends LinkProps {}

const {
  href,
  variant = 'default',
  size = 'md',
  external = false,
  underline = 'hover',
  class: className = '',
  ...rest
} = Astro.props;

// 외부 링크 자동 감지
const isExternal =
  external || (typeof href === 'string' && (href.startsWith('http') || href.startsWith('//')));

// 기본 스타일
const baseStyles =
  'transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500';

// 크기별 스타일
const sizeStyles = {
  sm: 'text-sm',
  md: 'text-base',
  lg: 'text-lg',
};

// 변형별 스타일
const variantStyles = {
  default:
    'text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300',
  secondary: 'text-gray-600 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300',
  muted: 'text-gray-500 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-400',
  inherit: 'text-current hover:text-current/80',
};

// 밑줄 스타일
const underlineStyles = {
  none: 'no-underline',
  always: 'underline',
  hover: 'no-underline hover:underline',
  focus: 'no-underline focus:underline',
};

// 외부 링크 속성
const externalProps = isExternal
  ? {
      target: '_blank',
      rel: 'noopener noreferrer',
    }
  : {};

// 최종 클래스 조합
const linkClasses = [
  baseStyles,
  sizeStyles[size],
  variantStyles[variant],
  underlineStyles[underline],
  className,
]
  .filter(Boolean)
  .join(' ');
---

<a href={href} class={linkClasses} {...externalProps} {...rest}>
  <slot />
  {
    isExternal && (
      <svg
        class="inline w-3 h-3 ml-1"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 20 20"
        fill="currentColor"
        aria-hidden="true"
      >
        <path
          fill-rule="evenodd"
          d="M4.25 5.5a.75.75 0 00-.75.75v8.5c0 .414.336.75.75.75h8.5a.75.75 0 00.75-.75v-4a.75.75 0 011.5 0v4A2.25 2.25 0 0112.75 17h-8.5A2.25 2.25 0 012 14.75v-8.5A2.25 2.25 0 014.25 4h5a.75.75 0 010 1.5h-5z"
          clip-rule="evenodd"
        />
        <path
          fill-rule="evenodd"
          d="M6.194 12.753a.75.75 0 001.06.053L16.5 4.44v2.81a.75.75 0 001.5 0v-4.5a.75.75 0 00-.75-.75h-4.5a.75.75 0 000 1.5h2.553l-9.056 8.194a.75.75 0 00-.053 1.06z"
          clip-rule="evenodd"
        />
      </svg>
    )
  }
</a>

<style>
  /* 링크 호버 효과 개선 */
  a {
    text-decoration-thickness: 1px;
    text-underline-offset: 2px;
  }

  /* 포커스 상태 개선 */
  a:focus {
    border-radius: 2px;
  }

  :global(.dark) a:focus {
    @apply ring-offset-gray-800;
  }

  /* 부드러운 색상 전환 */
  a.link-smooth {
    transition:
      color 0.15s ease-in-out,
      text-decoration-color 0.15s ease-in-out;
  }

  /* 외부 링크 아이콘 호버 효과 */
  a:hover svg {
    transform: translate(1px, -1px);
    transition: transform 0.15s ease-in-out;
  }

  /* 밑줄 애니메이션 */
  .link-underline-animated {
    position: relative;
    text-decoration: none;
  }

  .link-underline-animated::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 1px;
    background-color: currentColor;
    transition: width 0.25s ease-in-out;
  }

  .link-underline-animated:hover::after {
    width: 100%;
  }

  /* 다양한 색상 변형 */
  .link-success {
    @apply text-green-600 hover:text-green-700;
  }

  :global(.dark) .link-success {
    @apply text-green-400 hover:text-green-300;
  }

  .link-warning {
    @apply text-yellow-600 hover:text-yellow-700;
  }

  :global(.dark) .link-warning {
    @apply text-yellow-400 hover:text-yellow-300;
  }

  .link-error {
    @apply text-red-600 hover:text-red-700;
  }

  :global(.dark) .link-error {
    @apply text-red-400 hover:text-red-300;
  }
</style>
